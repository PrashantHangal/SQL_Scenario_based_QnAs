Here are some challenging SQL interview questions:

1. Write a query to return the second-highest salary from an employee table, without using LIMIT, OFFSET, or TOP.
Ans:
SELECT MAX(salary) FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);


2. Retrieve the top 3 earning employees in each department using a window function.
Ans:
SELECT * FROM (
SELECT employee_id, department_id, salary,
RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk
FROM employees
) ranked
WHERE rnk <= 3;


3. Find all employees who have the exact same salary as someone else in their department.
Ans:
SELECT * FROM employees e1
WHERE EXISTS (
SELECT 1 FROM employees e2
WHERE e1.department_id = e2.department_id
AND e1.salary = e2.salary
AND e1.employee_id <> e2.employee_id
);


4. Identify records in a table that don’t have a corresponding match in another table (anti-join).
Ans:
SELECT * FROM table1
WHERE NOT EXISTS (
SELECT 1 FROM table2
WHERE table1.id = table2.id
);


5. Write a query to find the percentage contribution of each department’s salary to the total company payroll.
Ans:

select department_id,
SUM(salary *100)/(select Sum(salary) from employees) AS pct_distribution
From employees
Group by department_id;


6. From a table of product sales, find the product(s) with the highest single-day sale.
Ans:
SELECT product_id, sale_date, sales_amount
FROM sales
WHERE (product_id, sales_amount) IN (
SELECT product_id, MAX(sales_amount)
FROM sales
GROUP BY product_id
);


7. Write a query to find the average salary for each department, and only return departments where this average is above the overall company average.
Ans:
SELECT department_id, AVG(salary) AS dept_avg
FROM employees
GROUP BY department_id
HAVING AVG(salary) > (SELECT AVG(salary) FROM employees);


8. Detect gaps in a sequence of order IDs (e.g., missing integers in a numeric ID column).
Ans:
SELECT id + 1 AS missing_id
FROM orders o1
WHERE NOT EXISTS (SELECT 1 FROM orders o2 WHERE o2.id = o1.id + 1);


9. From a list of orders, retrieve customers who placed more than one order in the same week.
Ans:
SELECT customer_id
FROM (
SELECT customer_id, WEEK(order_date) AS week_num, COUNT(*) AS cnt
FROM orders
GROUP BY customer_id, WEEK(order_date)
) weekly
WHERE cnt > 1;


10. Write a query to calculate the cumulative revenue by day for each product.
Ans: 
SELECT product_id, order_date,
SUM(sales_amount) OVER (PARTITION BY product_id ORDER BY order_date) AS running_total
FROM sales;




